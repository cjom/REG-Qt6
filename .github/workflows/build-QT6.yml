name: Build REG-linux QT6

on:
  workflow_dispatch:

concurrency:
    group: ${{ github.repository }}-${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

permissions:
  contents: write

env:
  LANG: en_US.UTF-8
  LANGUAGE: en_US:en
  LC_ALL: en_US.UTF-8
  FORCE_UNSAFE_CONFIGURE: 1
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    name: Build REG-linux QT6
    runs-on: ${{ matrix.os }}
    outputs:
      qtversion: ${{ steps.compile_step.outputs.qtversion }}
      dorelease: ${{ false || steps.compile_step.outputs.dorelease }}
    strategy:
      matrix:
        os: [ubuntu-24.04-arm, ubuntu-latest]
        exclude:
          - os: ubuntu-24.04-arm
            platform: asahi
          - os: ubuntu-latest
            platform: bcm2711
          - os: ubuntu-latest
            platform: bcm2712
          - os: ubuntu-latest
            platform: h5
          - os: ubuntu-latest
            platform: jh7110
          - os: ubuntu-latest
            platform: k1
          - os: ubuntu-latest
            platform: rk3288
          - os: ubuntu-latest
            platform: rk3326
          - os: ubuntu-latest
            platform: rk3399
          - os: ubuntu-latest
            platform: rk3588
          - os: ubuntu-latest
            platform: s905gen3
          - os: ubuntu-latest
            platform: s922x
          - os: ubuntu-latest
            platform: sm8250
          - os: ubuntu-latest
            platform: x86_64
          - os: ubuntu-latest
            platform: x86_64_v3
        platform: [bcm2711, bcm2712, h5, jh7110, k1, rk3288, rk3326, rk3399, rk3588, s905gen3, s922x, sm8250, asahi, x86_64, x86_64_v3]
      fail-fast: false
    steps:
      - name: Compile ${{ matrix.platform }}
        id: compile_step
        shell: bash
        run: |
          sudo apt-get update && sudo apt-get -y remove '*azure*' '*firefox*' && sudo apt-get -y install llvm-16-dev libclang-16-dev && sudo apt-get -y autoremove && sudo apt-get -y clean && sudo rm -rf /var/lib/apt/lists/*
          df -BG --output=avail ./
          
          rm -rf ./REG-LINUX ./REG-QT6-COMPILED
          git clone --branch master "https://github.com/REG-Linux/REG-Linux.git" ./REG-LINUX
          cd REG-LINUX
          git submodule init
          git submodule update
          rm -rf .git .github buildroot/.github buildroot/.gitlab
          
          # Merge buildroot patches
          CUSTOM_DIR=${GITHUB_WORKSPACE}/REG-LINUX/custom BUILDROOT_DIR=${GITHUB_WORKSPACE}/REG-LINUX/buildroot ${GITHUB_WORKSPACE}/REG-LINUX/scripts/linux/mergeToBR.sh
          
          # Version
          qtversion="$(grep -m 1 QT6_VERSION_MAJOR buildroot/package/qt6/qt6.mk | sed -e 's/.*=[ ]*//')$(grep -m 1 'QT6_VERSION ' buildroot/package/qt6/qt6.mk | sed -e 's/.*)//')"
          echo "qtversion=${qtversion}" >> "$GITHUB_OUTPUT"
          echo "qtversion=${qtversion}"
          
          case ${{ matrix.platform }} in
            asahi)
              # After each package is compiled and installed, keep only newest 4 and qt6
              sed -i '/stamp_installed\:/,/stamp_dircleaned\:/ s:^$:\tfind \$(BUILD_DIR) -mindepth 1 -maxdepth 1 -type d -not -iname "*qt6*" -printf "%T\@\\t%p\\n" | sort -g | head -n -4 | cut -f 2- | xargs -r rm -rf \n\tdf -BG --output=avail ./ \n:' buildroot/package/pkg-generic.mk
            ;;
            *)
              # Do nothing
            ;;
          esac
          
          
          # After each downloaded package is extracted, delete older and keep latest 3
          sed -i 's:(TAR_OPTIONS) -:(TAR_OPTIONS) - \&\& find \$\$(DL_DIR) -mindepth 1 -maxdepth 1 -type d -printf "%T\@\\t%p\\n" | sort -g | head -n -3 | cut -f 2- | xargs -r rm -rfv :' buildroot/package/pkg-generic.mk
          
          # Disable CCACHE and BR2_PER_PACKAGE_DIRECTORIES
          sed -i "/BR2_CCACHE/d" configs/reglinux-board.common
          sed -i "/BR2_PER_PACKAGE_DIRECTORIES/d" configs/* Makefile
          
          # Enable the flag to build QT6 from source
          sed -i s/#BR2_PACKAGE_REGLINUX_QT6=y/BR2_PACKAGE_REGLINUX_QT6=y/ configs/reglinux-board.common
          sed -i s/#BR2_PACKAGE_REGLINUX_QT6_BUILD_FROM_SOURCE=y/BR2_PACKAGE_REGLINUX_QT6_BUILD_FROM_SOURCE=y/ configs/reglinux-board.common
          sed -i s/#BR2_PACKAGE_QT6BASE_DEFAULT_QPA=\"wayland\"/BR2_PACKAGE_QT6BASE_DEFAULT_QPA=\"wayland\"/ configs/reglinux-board.common
          
          # Create built output directory
          mkdir -p "${GITHUB_WORKSPACE}/REG-QT6-COMPILED"
          
          # Get file if already released and avoid compiling again
          wget -q -nd -P "${GITHUB_WORKSPACE}/REG-QT6-COMPILED" "https://github.com/${GITHUB_REPOSITORY}/releases/download/${qtversion}/reglinux-qt6-${qtversion}-${{ matrix.platform }}.tar.gz" || ${{ true }}
          if [[ ! -f "${GITHUB_WORKSPACE}/REG-QT6-COMPILED/reglinux-qt6-${qtversion}-${{ matrix.platform }}.tar.gz" ]]
          then
            # Build
            ${GITHUB_WORKSPACE}/REG-LINUX/configs/createDefconfig.sh ${GITHUB_WORKSPACE}/REG-LINUX/configs/reglinux-${{ matrix.platform }}
            CCACHE_DISABLE=1 make BR2_EXTERNAL=${GITHUB_WORKSPACE}/REG-LINUX -C ${GITHUB_WORKSPACE}/REG-LINUX/buildroot reglinux-${{ matrix.platform }}_defconfig
            CCACHE_DISABLE=1 make BR2_EXTERNAL=${GITHUB_WORKSPACE}/REG-LINUX -C ${GITHUB_WORKSPACE}/REG-LINUX/buildroot reglinux-qt6
            
            # Create package
            cd ${GITHUB_WORKSPACE}/REG-LINUX/buildroot/output || exit 1
            staging="$(cat build/staging.dir)"
            cat build/host-qt6*/.files-list-host.txt | cut -d ',' -f 2 | sed -e 's+\.\/+host\/+g' >qt6-host-files.txt
            cat build/qt6*/.files-list-staging.txt | cut -d ',' -f 2 | sed -e "s+\.\/+${staging}\/+g" >qt6-staging-files.txt
            cat build/qt6*/.files-list.txt | cut -d ',' -f 2 | sed -e 's+\.\/+target\/+g' >qt6-target-files.txt
            cat qt6-host-files.txt qt6-staging-files.txt qt6-target-files.txt >filelist.txt
            find . | grep /host/ | grep -i Qt | sed -e 's/^\.\///g' >>filelist.txt
            find . | grep /target/ | grep Qt | sed -e 's/^\.\///g' >>filelist.txt
            sort -o sortedfilelist.txt -u filelist.txt
            tar czf  "${GITHUB_WORKSPACE}/REG-QT6-COMPILED/reglinux-qt6-${qtversion}-${{ matrix.platform }}.tar.gz" -T sortedfilelist.txt
            echo "dorelease=${{ true }}" >> "$GITHUB_OUTPUT"
          fi

      - name: show_mesa_logs_${{ matrix.platform }}
        id: show_mesa_logs
        if: ${{ ! cancelled() }}
        shell: bash
        run: |
          find ./ -type f -iname 'meson-log.txt' -exec cat {} \;

      - name: upload_artifacts_${{ matrix.platform }}
        id: upload_artifacts
        uses: actions/upload-artifact@v4
        with:
          name: reglinux-qt6-${{ steps.compile_step.outputs.qtversion }}-${{ matrix.platform }}
          path: ./REG-QT6-COMPILED/

  create_release:
    name: Create release
    runs-on: ubuntu-latest
    needs: build
    if: ${{ needs.build.outputs.dorelease && ! cancelled() }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./REG-QT6-COMPILED/
          merge-multiple: true
      - name: Create release
        uses: softprops/action-gh-release@master
        with:
          files: ./REG-QT6-COMPILED/reglinux-qt6-*
          tag_name: ${{ needs.build.outputs.qtversion }}
          prerelease: false
          generate_release_notes: true
          name: ${{ needs.build.outputs.qtversion }}
