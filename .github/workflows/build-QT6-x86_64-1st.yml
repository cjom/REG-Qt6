name: Build REG-linux QT6 x86_64 1st

on:
  workflow_dispatch:

concurrency:
    group: ${{ github.repository }}-${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

permissions:
  contents: write

env:
  LANG: en_US.UTF-8
  LANGUAGE: en_US:en
  LC_ALL: en_US.UTF-8
  FORCE_UNSAFE_CONFIGURE: 1
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    name: Build REG-linux QT6 x86_64 1st
    runs-on: ubuntu-latest
    container: reglinux/reglinux-build:latest
    outputs:
      qtversion: ${{ steps.compile_step.outputs.qtversion }}
      dorelease: ${{ false || steps.compile_step.outputs.dorelease }}
    strategy:
      matrix:
        platform: [x86_64]
      fail-fast: false
    steps:
      - name: Cache x86_64
        id: cache_x86_64
        uses: actions/cache@v4
        env:
          cache-name: cache-x86_64
        with:
          path: ./REG-LINUX/buildroot/output
          key: ${{ runner.os }}-build-${{ env.cache-name }}

      - name: Compile ${{ matrix.platform }}
        id: compile_step
        shell: bash
        run: |
          trap 'if [[ "$GONEXTSTAGE" == "77" ]]; then exit 0; fi' EXIT
          git clone --branch master "https://github.com/REG-Linux/REG-Linux.git" ./REG-LINUX
          cd REG-LINUX
          git submodule init
          git submodule update
          rm -rf .git .github
          GONEXTSTAGE=0
          
          # After each package is compiled and installed, delete some of the biggest folders
          sed -i '/stamp_installed\:/,/stamp_dircleaned\:/ s:^$:\tfind \$(BUILD_DIR) -type f -not \\\( -ipath "*buildroot-config*" -or -ipath "*linux-headers-*" -or -ipath "*toolchain*" -or -ipath "*qt6*" -or -ipath "*skeleton*" -or -iname ".stamp*" -or -iname ".br*" -or -iname ".files*" -or -iname "*config*" -or -iname "Makefile*" -or -iname "*autoconf*" -or -iname "*auto.conf*" -or -iname "CMakeLists*" \\\) -delete \
          	[[ \$(shell du -csB M ./output | grep -m1 total | grep -o "^[0-9]*") -lt 15 ]] || \( GONEXTSTAGE=77 ; exit 77 \) \n :' buildroot/package/pkg-generic.mk
          
          # After each downloaded package is extracted, delete older and keep latest 3
          sed -i 's:(TAR_OPTIONS) -:(TAR_OPTIONS) - \&\& find \$\$(DL_DIR) -mindepth 1 -maxdepth 1 -type d -printf "%T\@\\t%p\\n" | sort -g | head -n -3 | cut -f 2- | xargs -r rm -rfv :' buildroot/package/pkg-generic.mk
          
          # Disable CCACHE and BR2_PER_PACKAGE_DIRECTORIES
          sed -i "/BR2_CCACHE/d" configs/reglinux-board.common
          sed -i "/BR2_PER_PACKAGE_DIRECTORIES/d" configs/* Makefile
          
          # Enable the flag to build QT6 from source
          sed -i s/#BR2_PACKAGE_REGLINUX_QT6=y/BR2_PACKAGE_REGLINUX_QT6=y/ configs/reglinux-board.common
          sed -i s/#BR2_PACKAGE_REGLINUX_QT6_BUILD_FROM_SOURCE=y/BR2_PACKAGE_REGLINUX_QT6_BUILD_FROM_SOURCE=y/ configs/reglinux-board.common
          sed -i s/#BR2_PACKAGE_QT6BASE_DEFAULT_QPA=\"wayland\"/BR2_PACKAGE_QT6BASE_DEFAULT_QPA=\"wayland\"/ configs/reglinux-board.common
          
          # Merge buildroot patches
          CUSTOM_DIR=${GITHUB_WORKSPACE}/REG-LINUX/custom BUILDROOT_DIR=${GITHUB_WORKSPACE}/REG-LINUX/buildroot ${GITHUB_WORKSPACE}/REG-LINUX/scripts/linux/mergeToBR.sh
          
          # Version
          qtversion="$(grep -m 1 QT6_VERSION_MAJOR buildroot/package/qt6/qt6.mk | sed -e 's/.*=[ ]*//')$(grep -m 1 'QT6_VERSION ' buildroot/package/qt6/qt6.mk | sed -e 's/.*)//')"
          echo "qtversion=${qtversion}" >> "$GITHUB_OUTPUT"
          echo "qtversion=${qtversion}"
          
          # Create built output directory
          mkdir -p "${GITHUB_WORKSPACE}/REG-QT6-COMPILED"
          
          # Get file if already released and avoid compiling again
          curl -sfLO --output-dir "${GITHUB_WORKSPACE}/REG-QT6-COMPILED" "https://github.com/${GITHUB_REPOSITORY}/releases/download/${qtversion}/reglinux-qt6-${qtversion}-${{ matrix.platform }}.tar.gz" || ${{ true }}
          [[ -f "${GITHUB_WORKSPACE}/REG-QT6-COMPILED/reglinux-qt6-${qtversion}-${{ matrix.platform }}.tar.gz" ]] && exit 0
          
          # Build
          ${GITHUB_WORKSPACE}/REG-LINUX/configs/createDefconfig.sh ${GITHUB_WORKSPACE}/REG-LINUX/configs/reglinux-${{ matrix.platform }}
          CCACHE_DISABLE=1 make O_=${GITHUB_WORKSPACE}/REG-LINUX/buildroot/output/build BR2_EXTERNAL=${GITHUB_WORKSPACE}/REG-LINUX -C ${GITHUB_WORKSPACE}/REG-LINUX/buildroot reglinux-${{ matrix.platform }}_defconfig
          CCACHE_DISABLE=1 make O_=${GITHUB_WORKSPACE}/REG-LINUX/buildroot/output/build BR2_EXTERNAL=${GITHUB_WORKSPACE}/REG-LINUX -C ${GITHUB_WORKSPACE}/REG-LINUX/buildroot reglinux-qt6
          
          # Create package
          cd ${GITHUB_WORKSPACE}/REG-LINUX/buildroot/output || exit 1
          staging="$(cat build/staging.dir)"
          cat build/host-qt6*/.files-list-host.txt | cut -d ',' -f 2 | sed -e 's/\.\//host\//g' >qt6-host-files.txt
          cat build/qt6*/.files-list-staging.txt | cut -d ',' -f 2 | sed -e "s+\.\/+$staging\/+g" >qt6-staging-files.txt
          cat build/qt6*/.files-list.txt | cut -d ',' -f 2 | sed -e 's/\.\//target\//g' >qt6-target-files.txt
          cat qt6-host-files.txt qt6-staging-files.txt qt6-target-files.txt >filelist.txt
          find . | grep /host/ | grep -i Qt | sed -e 's/^\.\///g' >>filelist.txt
          find . | grep /target/ | grep Qt | sed -e 's/^\.\///g' >>filelist.txt
          sort -o sortedfilelist.txt -u filelist.txt
          tar cvzf  "${GITHUB_WORKSPACE}/REG-QT6-COMPILED/reglinux-qt6-${qtversion}-${{ matrix.platform }}.tar.gz" -T sortedfilelist.txt
          echo "dorelease=${{ true }}" >> "$GITHUB_OUTPUT"
          
      - name: upload_artifacts_${{ matrix.platform }}
        id: upload_artifacts
        uses: actions/upload-artifact@v4
        with:
          name: reglinux-qt6-${{ steps.compile_step.outputs.qtversion }}-${{ matrix.platform }}
          path: ./REG-QT6-COMPILED/

  create_release:
    name: Create release
    runs-on: ubuntu-latest
    needs: build
    if: ${{ needs.build.outputs.dorelease && ! cancelled() }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./REG-QT6-COMPILED/
          merge-multiple: true
      - name: Create release
        uses: softprops/action-gh-release@master
        with:
          files: ./REG-QT6-COMPILED/**/reglinux-qt6-*
          tag_name: ${{ needs.build.outputs.qtversion }}
          prerelease: false
          generate_release_notes: true
          name: ${{ needs.build.outputs.qtversion }}
